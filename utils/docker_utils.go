package utils

import (
	"fmt"
	docker "github.com/fsouza/go-dockerclient"
)

func PrintDockerInfo(info *docker.DockerInfo) {

	fmt.Printf("ID: %s  // Docker 主机的唯一标识符\n", info.ID)
	fmt.Printf("Containers: %d  // 总容器数（包括所有状态）\n", info.Containers)
	fmt.Printf("ContainersRunning: %d  // 正在运行的容器数\n", info.ContainersRunning)
	fmt.Printf("ContainersPaused: %d  // 暂停的容器数\n", info.ContainersPaused)
	fmt.Printf("ContainersStopped: %d  // 停止的容器数\n", info.ContainersStopped)
	fmt.Printf("Images: %d  // 镜像数\n", info.Images)
	fmt.Printf("Driver: %s  // 存储驱动名称\n", info.Driver)
	fmt.Printf("SystemStatus: %+v  // 系统状态信息\n", info.SystemStatus)
	fmt.Printf("NFd: %d  // 打开的文件描述符数\n", info.NFd)
	fmt.Printf("NGoroutines: %d  // 当前正在运行的 goroutine 数量\n", info.NGoroutines)
	fmt.Printf("SystemTime: %s  // 系统时间\n", info.SystemTime)
	fmt.Printf("ExecutionDriver: %s  // 执行驱动名称（已弃用）\n", info.ExecutionDriver)
	fmt.Printf("LoggingDriver: %s  // 日志驱动名称\n", info.LoggingDriver)
	fmt.Printf("CgroupDriver: %s  // cgroups 驱动名称\n", info.CgroupDriver)
	fmt.Printf("NEventsListener: %d  // 事件监听器的数量\n", info.NEventsListener)
	fmt.Printf("KernelVersion: %s  // 内核版本\n", info.KernelVersion)
	fmt.Printf("OperatingSystem: %s  // 操作系统名称\n", info.OperatingSystem)
	fmt.Printf("OSType: %s  // 操作系统类型（如 linux）\n", info.OSType)
	fmt.Printf("Architecture: %s  // 架构类型（如 x86_64）\n", info.Architecture)
	fmt.Printf("IndexServerAddress: %s  // Docker Hub 地址\n", info.IndexServerAddress)
	fmt.Printf("RegistryConfig: %+v  // 注册表配置信息\n", info.RegistryConfig)
	fmt.Printf("SecurityOptions: %+v  // 安全选项列表\n", info.SecurityOptions)
	fmt.Printf("NCPU: %d  // CPU 核心数\n", info.NCPU)
	fmt.Printf("MemTotal: %d  // 总内存大小（字节）\n", info.MemTotal)
	fmt.Printf("DockerRootDir: %s  // Docker 根目录路径\n", info.DockerRootDir)
	fmt.Printf("HTTPProxy: %s  // HTTP 代理地址\n", info.HTTPProxy)
	fmt.Printf("HTTPSProxy: %s  // HTTPS 代理地址\n", info.HTTPSProxy)
	fmt.Printf("NoProxy: %s  // 不使用代理的地址列表\n", info.NoProxy)
	fmt.Printf("Name: %s  // Docker 主机名\n", info.Name)
	fmt.Printf("Labels: %+v  // 标签列表\n", info.Labels)
	fmt.Printf("ServerVersion: %s  // Docker 服务器版本\n", info.ServerVersion)
	fmt.Printf("ClusterStore: %s  // 集群存储地址\n", info.ClusterStore)
	fmt.Printf("Runtimes: %+v  // 运行时信息\n", info.Runtimes)
	fmt.Printf("ClusterAdvertise: %s  // 集群广播地址\n", info.ClusterAdvertise)
	fmt.Printf("Isolation: %s  // 隔离模式\n", info.Isolation)
	fmt.Printf("InitBinary: %s  // init 二进制文件路径\n", info.InitBinary)
	fmt.Printf("DefaultRuntime: %s  // 默认运行时名称\n", info.DefaultRuntime)
	fmt.Printf("Swarm: %+v  // Swarm 集群信息\n", info.Swarm)
	fmt.Printf("LiveRestoreEnabled: %t  // 是否启用 live restore\n", info.LiveRestoreEnabled)
	fmt.Printf("MemoryLimit: %t  // 是否支持内存限制\n", info.MemoryLimit)
	fmt.Printf("SwapLimit: %t  // 是否支持交换分区限制\n", info.SwapLimit)
	fmt.Printf("KernelMemory: %t  // 是否支持内核内存限制\n", info.KernelMemory)
	fmt.Printf("CPUCfsPeriod: %t  // 是否支持 CPU CFS 周期\n", info.CPUCfsPeriod)
	fmt.Printf("CPUCfsQuota: %t  // 是否支持 CPU CFS 配额\n", info.CPUCfsQuota)
	fmt.Printf("CPUShares: %t  // 是否支持 CPU shares\n", info.CPUShares)
	fmt.Printf("CPUSet: %t  // 是否支持 CPU set\n", info.CPUSet)
	fmt.Printf("IPv4Forwarding: %t  // 是否启用了 IPv4 转发\n", info.IPv4Forwarding)
	fmt.Printf("BridgeNfIptables: %t  // 是否启用了桥接网络上的 iptables 规则\n", info.BridgeNfIptables)
	fmt.Printf("BridgeNfIP6tables: %t  // 是否启用了桥接网络上的 ip6tables 规则\n", info.BridgeNfIP6tables)
	fmt.Printf("Debug: %t  // 是否启用了调试模式\n", info.Debug)
	fmt.Printf("OomKillDisable: %t  // 是否禁用了 OOM 杀死进程\n", info.OomKillDisable)
	fmt.Printf("ExperimentalBuild: %t  // 是否是实验性构建\n", info.ExperimentalBuild)
}
